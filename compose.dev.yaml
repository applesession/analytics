# docker-compose -f compose.dev.yaml up --build
services:
  db:
    image: postgres:15
    restart: unless-stopped
    networks:
      - application
    env_file:
      - ./.env
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d postgres']
      interval: 5s
      timeout: 2s
      retries: 20
  backend:
    build:
      context: ./backend
      target: development
    restart: unless-stopped
    ports:
      - ${NODE_PORT}:${NODE_PORT}
    networks:
      - application
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - path: ./backend
          action: sync
          target: /app
          ignore:
            - node_modules/
        - path: ./backend/package.json
          action: rebuild
  frontend:
    build:
      context: ./frontend
      target: development
    restart: unless-stopped
    ports:
      - ${VITE_PORT}:${VITE_PORT}
    networks:
      - application
    environment:
      - VITE_SERVER_API=${VITE_SERVER_API}
      - VITE_PORT=${VITE_PORT}
      - VITE_HOST=${VITE_HOST}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_started
  prisma-studio:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./backend:/app
    command: npx prisma studio --port ${PRISMA_STUDIO_PORT} --browser none
    ports:
      - '${PRISMA_STUDIO_PORT}:${PRISMA_STUDIO_PORT}'
    networks:
      - application
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy

networks:
  application:

volumes:
  db_data:
